1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "metashot.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "metashot.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "metashot.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "metashot.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Health check endpoint:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}api/health
  {{- end }}
{{- end }}
{{- else }}
  Use the same URL as above with /api/health path
{{- end }}

3. API endpoints:
   - POST /api/screenshot - Generate screenshots from Metabase questions
   - GET /api/health - Health check endpoint

{{- if .Values.env.AUTH_TOKEN }}
4. Authentication:
   Authentication is enabled. Include the Authorization header with your requests:
   Authorization: Bearer <your-token>
{{- else }}
4. Authentication:
   Authentication is not configured. Set env.AUTH_TOKEN or use envFrom to provide AUTH_TOKEN to enable authentication.
{{- end }}

5. Environment Configuration:
   Make sure the following environment variables are configured:
   - METABASE_SITE_URL: Your Metabase instance URL
   - METABASE_SECRET_KEY: Your Metabase secret key for embedding (use envFrom for security)
   - S3_BUCKET: S3 bucket name for storing screenshots
   - S3_REGION: S3 region
   - S3_ACCESS_KEY_ID: S3 access key ID
   - S3_SECRET_ACCESS_KEY: Use envFrom to provide this securely
   {{- if .Values.envFrom }}
   - Environment variables are configured via envFrom sources
   {{- else }}
   - Consider using envFrom to inject sensitive environment variables from secrets
   {{- end }}