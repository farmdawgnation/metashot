name: Publish Helm Chart

on:
  release:
    types: [published]
  repository_dispatch:
    types: [release-created]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  publish-helm:
    runs-on: ubuntu-latest
    # Only run for manual/release/repository_dispatch triggers
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'release') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'release-created')
    
    steps:
    - name: Determine release info (pre-checkout)
      id: release-info-pre
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "checkout_ref=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "checkout_ref=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "checkout_ref=${{ github.event.client_payload.tag_name }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.release-info-pre.outputs.checkout_ref }}
        fetch-depth: 0
    
    - name: Determine final release info
      id: release-info
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "checkout_ref=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          echo "checkout_ref=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "tag=${{ github.event.client_payload.tag_name }}" >> $GITHUB_OUTPUT
          echo "checkout_ref=${{ github.event.client_payload.tag_name }}" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.14.0'
    
    - name: Log in to Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Update Helm chart versions
      run: |
        # Remove 'v' prefix from tag if present
        VERSION=$(echo "${{ steps.release-info.outputs.tag }}" | sed 's/^v//')
        
        # Update chart version and appVersion
        sed -i "s/version: .*/version: $VERSION/" helm/metashot/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$VERSION\"/" helm/metashot/Chart.yaml
        
        # Update default image tag in values.yaml
        sed -i "s/tag: .*/tag: \"$VERSION\"/" helm/metashot/values.yaml
    
    - name: Package and push Helm chart
      run: |
        VERSION=$(echo "${{ steps.release-info.outputs.tag }}" | sed 's/^v//')
        CHART_NAME="metashot"
        OCI_URL="oci://ghcr.io/${{ github.repository_owner }}/helm"
        
        # Package the chart
        helm package helm/metashot --destination ./helm-packages
        
        # Push the chart to OCI registry
        helm push "./helm-packages/${CHART_NAME}-${VERSION}.tgz" "${OCI_URL}"
