name: Publish Helm Chart

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["Release Please"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  publish-helm:
    runs-on: ubuntu-latest
    # Only run on workflow_run if the release job was successful, or always run for manual/release triggers
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'release')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if release was created (for workflow_run)
      id: check-release
      if: github.event_name == 'workflow_run'
      run: |
        # Check if a release was created in the last 5 minutes
        recent_release=$(gh release list --limit 1 --json tagName,createdAt --jq '.[0] | select(.createdAt > (now - 300)) | .tagName // empty')
        if [ -z "$recent_release" ]; then
          echo "No recent release found, skipping..."
          echo "should_run=false" >> $GITHUB_OUTPUT
        else
          echo "Recent release found: $recent_release"
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Exit if no release was created
      if: github.event_name == 'workflow_run' && steps.check-release.outputs.should_run == 'false'
      run: exit 0
    
    - name: Determine release info
      id: release-info
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "checkout_ref=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          echo "checkout_ref=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "workflow_run" ]; then
          # Get the latest release tag from the repository
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "checkout_ref=$latest_tag" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.release-info.outputs.checkout_ref }}
        fetch-depth: 0
    
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.14.0'
    
    - name: Log in to Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
    
    - name: Update Helm chart versions
      run: |
        # Remove 'v' prefix from tag if present
        VERSION=$(echo "${{ steps.release-info.outputs.tag }}" | sed 's/^v//')
        
        # Update chart version and appVersion
        sed -i "s/version: .*/version: $VERSION/" helm/metashot/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"$VERSION\"/" helm/metashot/Chart.yaml
        
        # Update default image tag in values.yaml
        sed -i "s/tag: .*/tag: \"$VERSION\"/" helm/metashot/values.yaml
    
    - name: Package and push Helm chart
      run: |
        VERSION=$(echo "${{ steps.release-info.outputs.tag }}" | sed 's/^v//')
        CHART_NAME="metashot"
        OCI_URL="oci://ghcr.io/${{ github.repository_owner }}/helm"
        
        # Package the chart
        helm package helm/metashot --destination ./helm-packages
        
        # Push the chart to OCI registry
        helm push "./helm-packages/${CHART_NAME}-${VERSION}.tgz" "${OCI_URL}"
